# -*- coding: utf-8 -*-
"""Week3_ function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IVKfsrDq6hYbkypfJU-7ysXdGXaXTT15

Write a function named same that takes a string as input, and simply returns that string.
"""

def same(input_string):
    return (input_string)
x = "hello my friends"    
same(x)

"""Write a function named intro that takes a string as input. This string ist intended to be a person’s name and the output is a standardized greeting. For example, given the string “Becky” as input, the function should return: “Hello, my name is Becky and I love SI 106.”"""

def intro(input_string):
    return "Hello, my name is {} and I love SI 106.".format(input_string)

intro("Sara")

"""Write a function called s_change that takes one string as input and returns that string, concatenated with the string ” for fun.”."""

def s_change(x):
    return x + " for fun"

s_change("We go to the beach")

""" Write a function called decision that takes a string as input, and then checks the number of characters. If it has over 17 characters, return “This is a long string”, if it is shorter or has 17 characters, return “This is a short string”."""

def decision(string):
    x = len(string)
    if (x>17):
        return "This is a long string"
    else:
        return "This is a short string"

"""Write a function named total that takes a list of integers as input, and returns the total value of all those integers added together."""

def total(list):
    sum1 = 0
    len1=len(list)
    #print(len1)
    for i in range(5):
        #print(i)
        #print(list[i])
        sum1 = sum1+ list[i]
    return sum1
total([1,2,3,4,5])

"""Write a function called count that takes a list of numbers as input and returns a count of the number of elements in the list."""

def count (list_int):
    return len(list_int)
count([1,2,3,4,5,6,7,1,2,3,4,5])

def most_common_letter(s):
    frequencies = count_freqs(s)
    return best_key(frequencies)

def count_freqs(st):
    d = {}
    for c in st:
        if c not in d:
             d[c] = 0
        d[c] = d[c] + 1
    return d

def best_key(dictionary):
    ks = dictionary.keys()
    best_key_so_far = list(ks)[0]  # Have to turn ks into a real list before using [] to select an item
    for k in ks:
        if dictionary[k] > dictionary[best_key_so_far]:
            best_key_so_far = k
    return best_key_so_far

print(most_common_letter("abbbbbbbbbbbccccddddd"))

"""Write two functions, one called addit and one called mult. addit takes one number as an input and adds 5. mult takes one number as an input, and multiplies that input by whatever is returned by addit, and then returns the result."""

def addit(x):
    return x+5


def mult(y):
    z = addit(-2)
    return y*z
print(mult(1))

"""

Write a function called change that takes any string, adds “Nice to meet you!” to the end of the argument given, and returns that new string.
"""

def change (string):
    return string + "Nice to meet you!"

"""Write a function, accum, that takes a list of integers as input and returns the sum of those integers."""

def accum(list_int):
    len1 = len(list_int)
    sum1 = 0
    for i in range(len1):
        sum1 = sum1 + list_int[i]
    return sum1

accum([1,2,3,4,5])

"""Provided is a list of tuples. Create another list called t_check that contains the third element of every tuple."""

lst_tups = [('Articuno', 'Moltres', 'Zaptos'), 
            ('Beedrill', 'Metapod', 'Charizard', 'Venasaur', 'Squirtle'), 
            ('Oddish', 'Poliwag', 'Diglett', 'Bellsprout'), 
            ('Ponyta', "Farfetch'd", "Tauros", 'Dragonite'), 
            ('Hoothoot', 'Chikorita', 'Lanturn', 'Flaaffy', 'Unown', 'Teddiursa', 'Phanpy'), 
            ('Loudred', 'Volbeat', 'Wailord', 'Seviper', 'Sealeo')]

t_check = []
for tup in lst_tups:
    t_check.append(tup[2])

print(t_check)

"""With only one line of code, assign the variables water, fire, electric, and grass to the values “Squirtle”, “Charmander”, “Pikachu”, and “Bulbasaur”"""

water = "water", "fire", "electric", "grass"

Squirtle, Charmander, Pikachu, Bulbasaur = water

"""If you remember, the .items() dictionary method produces a sequence of tuples. Keeping this in mind, we have provided you a dictionary called pokemon. For every key value pair, append the key to the list p_names, and append the value to the list p_number. Do not use the .keys() or .values() methods."""

pokemon = {'Rattata': 19, 'Machop': 66, 'Seel': 86, 'Volbeat': 86, 'Solrock': 126}
p_names = []
p_number = []
for temp1, temp2 in pokemon.items():
    p_names.append(temp1)
    p_number.append(temp2)
print(p_number)

"""The .items() method produces a sequence of key-value pair tuples. With this in mind, write code to create a list of keys from the dictionary track_medal_counts and assign the list to the variable name track_events. Do NOT use the .keys() method."""

track_medal_counts = {'shot put': 1, 'long jump': 3, '100 meters': 2, '400 meters': 2, '100 meter hurdles': 3, 'triple jump': 3, 'steeplechase': 2, '1500 meters': 1, '5K': 0, '10K': 0, 'marathon': 0, '200 meters': 0, '400 meter hurdles': 0, 'high jump': 1}
track_events = []
for tem1 in track_medal_counts:
    track_events.append(tem1)

print(track_events)

"""The list below, tuples_lst, is a list of tuples. Create a list of the second elements of each tuple and assign this list to the variable country."""

tuples_lst = [('Beijing', 'China', 2008), ('London', 'England', 2012), ('Rio', 'Brazil', 2016, 'Current'), ('Tokyo', 'Japan', 2020, 'Future')]

country = []
for temp2 in tuples_lst:
    country.append(temp2[1])

gold = {'USA':31, 'Great Britain':19, 'China':19, 'Germany':13, 'Russia':12, 'Japan':10, 'France':8, 'Italy':8}

num_medals = []
for key in gold:
    num_medals.append(gold[key])
############
gold = {'USA':31, 'Great Britain':19, 'China':19, 'Germany':13, 'Russia':12, 'Japan':10, 'France':8, 'Italy':8}

num_medals = []
for key, value in gold.items():
    num_medals.append(value)
print(num_medals)